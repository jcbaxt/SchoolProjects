// Program 3
// CIS 199-75
// Due: 3/7/2019
// By: N9350

// This application calculates the marginal tax rate and
// tax due for filers in 2019 tax year.

// Version 3
// Listens to radio buttons to apply income thresholds
// Calculates tax due through running total with each
// tier's portion of the tax.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Prog3
{
    public partial class Prog3Form : Form
    {
        // Tax Year 2019 Data
        // Taxable income thresholds for each status
        // Single Filers
        private const int SINGLE1 = 9700;   // 1st single threshold (LOWEST)
        private const int SINGLE2 = 39475;  // 2nd single threshold
        private const int SINGLE3 = 84200;  // 3rd single threshold
        private const int SINGLE4 = 160725; // 4th single threshold
        private const int SINGLE5 = 204100; // 5th single threshold
        private const int SINGLE6 = 510300; // 6th single threshold (HIGHEST)

        //Married Filing Separately
        private const int SEPARATELY1 = 9700;   // 1st married-separately threshold (LOWEST)
        private const int SEPARATELY2 = 39475;  // 2nd married-separately threshold
        private const int SEPARATELY3 = 84200;  // 3rd married-separately threshold
        private const int SEPARATELY4 = 160725; // 4th married-separately threshold
        private const int SEPARATELY5 = 204100; // 5th married-separately threshold
        private const int SEPARATELY6 = 306175; // 6th married-separately threshold (HIGHEST)

        // Married Filing Jointly
        private const int JOINTLY1 = 19400;  // 1st married-jointly threshold (LOWEST)
        private const int JOINTLY2 = 78950;  // 2nd married-jointly threshold
        private const int JOINTLY3 = 168400; // 3rd married-jointly threshold
        private const int JOINTLY4 = 321450; // 4th married-jointly threshold
        private const int JOINTLY5 = 408200; // 5th married-jointly threshold
        private const int JOINTLY6 = 612350; // 6th married-jointly threshold (HIGHEST)

        // Head of Household
        private const int HOH1 = 13850;  // 1st head of household threshold (LOWEST)
        private const int HOH2 = 52850;  // 2nd head of household threshold
        private const int HOH3 = 84200;  // 3rd head of household threshold
        private const int HOH4 = 160700; // 4th head of household threshold
        private const int HOH5 = 204100; // 5th head of household threshold
        private const int HOH6 = 510300; // 6th head of household threshold (HIGHEST)

        // Income threshold values that apply to this filer
        private int threshold1; // 1st income threshold
        private int threshold2; // 2nd income threshold
        private int threshold3; // 3rd income threshold
        private int threshold4; // 4th income threshold
        private int threshold5; // 5th income threshold
        private int threshold6; // 6th income threshold

        double[] rates = { .10, .12, .22, .24, .32, .35, .37 };
        int[] thresholds = new int[7];

        public Prog3Form()
        {
            InitializeComponent();
        }

        // User has clicked the Calculate Tax button
        // Will calculate and display their marginal tax rate and tax due
        private void calcTaxBtn_Click(object sender, EventArgs e)
        {
            // Tax Year 2019 Data
            // The marginal tax rates
            const decimal RATE1 = .10m; // 1st tax rate (LOWEST)
            const decimal RATE2 = .12m; // 2nd tax rate
            const decimal RATE3 = .22m; // 3rd tax rate
            const decimal RATE4 = .24m; // 4th tax rate
            const decimal RATE5 = .32m; // 5th tax rate
            const decimal RATE6 = .35m; // 6th tax rate
            const decimal RATE7 = .37m; // 7th tax rate (HIGHEST)

            int income = 0; // Filer's taxable income (input)

            double marginalRate = 0; // Filer's calculated marginal tax rate
            double tax = 0;          // Filer's calculated income tax due
            double currentTax = 0;   // Filer's tax for current tier

            int index = thresholds.Length - 1; //index variable for searching arrays
            bool found = false; //boolean variable for whether or not target is found or not

            if (int.TryParse(incomeTxt.Text, out income) && income >= 0)
            {
                //finding marginal rate
                while (index >= 0 && !found)
                {
                    if (income >= thresholds[index])
                    {
                        marginalRate = rates[index];
                        found = true;
                    }
                    else
                    {
                        --index;
                    }
                }
                if (found)
                {
                    thresholds[0] = thresholds[0] - 1;
                    thresholds[1] = thresholds[1] - 1;
                    thresholds[2] = thresholds[2] - 1;
                    thresholds[3] = thresholds[3] - 1;
                    thresholds[4] = thresholds[4] - 1;
                    thresholds[5] = thresholds[5] - 1;
                    thresholds[6] = thresholds[6] - 1;
                    
                    if (income < thresholds[6])
                    {
                        for (int i = 0; i <= index; ++i)
                        {
                            
                            currentTax += Math.Min((income - thresholds[i]), (thresholds[i + 1] - thresholds[i])) * rates[i];
                            tax += currentTax; 
                        }  
                    }
                    else
                    {
                        currentTax += Math.Min((income - thresholds[0]), (thresholds[1] - thresholds[0])) * rates[0];
                        currentTax += Math.Min((income - thresholds[1]), (thresholds[2] - thresholds[1])) * rates[1];
                        currentTax += Math.Min((income - thresholds[2]), (thresholds[3] - thresholds[2])) * rates[2];
                        currentTax += Math.Min((income - thresholds[3]), (thresholds[4] - thresholds[3])) * rates[3];
                        currentTax += Math.Min((income - thresholds[4]), (thresholds[5] - thresholds[4])) * rates[4];
                        currentTax += Math.Min((income - thresholds[5]), (thresholds[6] - thresholds[5])) * rates[5];
                        currentTax += (income - thresholds[6]) * rates[6];
                    }
                    taxOutLbl.Text = $"{currentTax:C}";
                    marginalRateOutLbl.Text = $"{marginalRate:P0}";
                    
                    tax = 0;
                    currentTax = 0;
                    income = 0;
                    marginalRate = 0;

                    thresholds[0] = thresholds[0] + 1;
                    thresholds[1] = thresholds[1] + 1;
                    thresholds[2] = thresholds[2] + 1;
                    thresholds[3] = thresholds[3] + 1;
                    thresholds[4] = thresholds[4] + 1;
                    thresholds[5] = thresholds[5] + 1;
                    thresholds[6] = thresholds[6] + 1;
                }
            }
            else // Invalid input
                MessageBox.Show("Enter valid income!");
        }

        // Form is loading
        // Sets default filing status as Single
        private void Prog2Form_Load(object sender, EventArgs e)
        {
            singleRdoBtn.Checked = true; // Choose single by default
                                         // Will raise CheckedChanged event
        }

        // User has checked/unchecked Single radio button
        // Updates income thresholds
        private void singleRdoBtn_CheckedChanged(object sender, EventArgs e)
        {
            if (singleRdoBtn.Checked) // Single?
            {
                thresholds[0] = 1;
                thresholds[1] = SINGLE1 + 1;
                thresholds[2] = SINGLE2 + 1;
                thresholds[3] = SINGLE3 + 1;
                thresholds[4] = SINGLE4 + 1;
                thresholds[5] = SINGLE5 + 1;
                thresholds[6] = SINGLE6 + 1;
            }
        }

        // User has checked/unchecked Married Filing Separately radio button
        // Updates income thresholds
        private void separatelyRdoBtn_CheckedChanged(object sender, EventArgs e)
        {
            if (separatelyRdoBtn.Checked) // Married Filing Separately?
            {
                thresholds[0] = 1;
                thresholds[1] = SEPARATELY1 + 1;
                thresholds[2] = SEPARATELY2 + 1;
                thresholds[3] = SEPARATELY3 + 1;
                thresholds[4] = SEPARATELY4 + 1;
                thresholds[5] = SEPARATELY5 + 1;
                thresholds[6] = SEPARATELY6 + 1;
            }
        }

        // User has checked/unchecked Married Filing Jointly radio button
        // Updates income thresholds
        private void jointlyRdoBtn_CheckedChanged(object sender, EventArgs e)
        {
            if (jointlyRdoBtn.Checked) // Married Filing Jointly?
            {
                thresholds[0] = 1;
                thresholds[1] = JOINTLY1 + 1;
                thresholds[2] = JOINTLY2 + 1;
                thresholds[3] = JOINTLY3 + 1;
                thresholds[4] = JOINTLY4 + 1;
                thresholds[5] = JOINTLY5 + 1;
                thresholds[6] = JOINTLY6 + 1;
            }
        }

        // User has checked/unchecked Head of Household radio button
        // Updates income thresholds
        private void headOfHouseRdoBtn_CheckedChanged(object sender, EventArgs e)
        {
            if (headOfHouseRdoBtn.Checked) // Head of Household?
            {
                thresholds[0] = 1;
                thresholds[1] = HOH1 + 1;
                thresholds[2] = HOH2 + 1;
                thresholds[3] = HOH3 + 1;
                thresholds[4] = HOH4 + 1;
                thresholds[5] = HOH5 + 1;
                thresholds[6] = HOH6 + 1;
            }
        }

        private void marginalRateOutLbl_Click(object sender, EventArgs e)
        {

        }
    }
}
